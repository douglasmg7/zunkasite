// Not used, for vim code format work.
import _search from '../lib/_search';

var app = new Vue({
    el: '#app',
    data: {
        currentPage: 'product',
        product: product,
        productMakers: productMakers,
        productCategories: productCategories,
        warranties: warranties,
        user: user,
        search: '',
        validation: {
            dealerProductPrice: '',
            storeProductDiscountValue: '',
            storeProductMarkup: '',
            storeProductPrice: '',
            storeProductQtd: '',
            storeProductHeight: '',
            storeProductLength: '',
            storeProductWeight: '',
            storeProductWidth: '',
            displayPriority: '',
            ean: ''
        },
        // Only for from use.
        storeProductPriceBr: '',
        storeProductMarkupeBr: '',
        storeProductDiscountValue: '',
        dealerProductPrice: '',
        // Button save animation.
        buttonSaveValue: 'Salvar',
        enableWatchStoreProductId: true,
        enableWatchEan: true,
        meliProduct: {},
        meliCategoryAttributes: [],
        meliCategoryId: '',
        meliListingType: 'gold_special',
    },
    created: function() {
        this.storeProductPriceBr = this.toBRCurrencyString(product.storeProductPrice.toFixed(2));
        this.storeProductMarkupeBr = this.toBRCurrencyString(product.storeProductMarkup.toFixed(2));
        this.storeProductDiscountValue = this.toBRCurrencyString(product.storeProductDiscountValue.toFixed(2));
        this.dealerProductPrice = this.toBRCurrencyString(product.dealerProductPrice.toFixed(2));
        this.loadMeliProduct();
    },
    watch: {
        'product.storeProductId': function(val) {
            if (this.enableWatchStoreProductId && val) {
                // console.log(`Getting product by storeProductId: ${val}`);
                axios.get(`/admin/product-by-store-product-id/${val}`, {
                    headers: {
                        "Accept": "application/json", 
                    },
                })
                .then((response)=>{
                    // Error.
                    if (response.data.error) {
                        prompt(`Não foi possível verificar código Zunka ${val}`);
                        this.product.storeProductId = "";
                        console.error(response.data.error);
                    }
                    // Product found.
                    else if (response.data.product){
                        let tplProduct;
                        // Confirm load data from other product.
                        if(window.confirm(`Produto com código zunka ${response.data.product.storeProductId} já existe.\nDeseja carregar informações do produto existente?`)) {
                            tplProduct = response.data.product;
                            axios.post(`/admin/product-copy-images/`, { srcId: response.data.product._id, dstId: this.product._id }, {
                                headers: {
                                    "Accept": "application/json", 
                                    'csrf-token' : csrfToken,
                                }
                            })
                            .then((response)=>{
                                // console.log(`this.product._id: ${this.product._id}`);
                                // Error.
                                if (response.data.error) {
                                    prompt(`Ocorreu um erro ao tentar carregar as informações do produto ${val}`);
                                    this.product.storeProductId = "";
                                    console.error(response.data.error);
                                } else {
                                    // this.product.dealerName = "Dell";
                                    // this.product.dealerProductWarrantyDays = tplProduct.dealerProductWarrantyDays;
                                    this.product.storeProductTitle = tplProduct.storeProductTitle;
                                    this.product.storeProductInfoMD = tplProduct.storeProductInfoMD;
                                    this.product.storeProductDetail = tplProduct.storeProductDetail;
                                    this.product.storeProductDescription = tplProduct.storeProductDescription;
                                    this.product.storeProductTechnicalInformation = tplProduct.storeProductTechnicalInformation;
                                    this.product.storeProductAdditionalInformation = tplProduct.storeProductAdditionalInformation;
                                    this.product.storeProductMaker = tplProduct.storeProductMaker;
                                    this.product.storeProductCategory = tplProduct.storeProductCategory;
                                    this.product.storeProductLength = tplProduct.storeProductLength;
                                    this.product.storeProductHeight = tplProduct.storeProductHeight;
                                    this.product.storeProductWidth = tplProduct.storeProductWidth;
                                    this.product.storeProductWeight = tplProduct.storeProductWeight;
                                    this.product.storeProductMarkup = tplProduct.storeProductMarkup;
                                    this.product.storeProductWarrantyDays = tplProduct.storeProductWarrantyDays;
                                    this.product.storeProductWarrantyDetail = tplProduct.storeProductWarrantyDetail;
                                    this.product.warrantyMarkdownName = tplProduct.warrantyMarkdownName;
                                    // Deprecatade - begin.
                                    this.product.includeWarrantyText = tplProduct.includeWarrantyText;
                                    // Deprecatade - end.
                                    this.product.images = tplProduct.images;
                                    this.product.includeOutletText = tplProduct.includeOutletText;
                                    this.product.displayPriority = tplProduct.displayPriority;
                                    this.enableWatchEan = false;
                                    this.product.ean = tplProduct.ean;
                                    let v = this;
                                    setTimeout(function(){ v.enableWatchEan = true; },100);
                                    this.product.marketZoom = tplProduct.marketZoom;
                                }
                            }) 
                            .catch((err)=>{
                                console.error(err.stack);
                            });
                        }
                    }
                })
                .catch((err)=>{
                    console.error(err);
                    alert(`Não foi possível verificar código Zunka ${val}`);
                    this.product.storeProductId = "";
                });        
            }
        },
        'product.ean': function(val) {
            if (this.enableWatchEan && val) {
                // console.log(`Getting product by storeProductId: ${val}`);
                axios.get(`/admin/products-same-ean`, {
                    headers: {
                        "Accept": "application/json", 
                    },
                    params: {
                        ean: val
                    },
                })
                .then((response)=>{
                    // console.log(`ean products: ${JSON.stringify(response.data.products, null, 4)}`);
                    // Error.
                    if (response.data.error) {
                        prompt(`Não foi possível verificar o código ean ${val}`);
                        this.product.ean = "";
                        console.error(response.data.error);
                    }
                    // Product found.
                    else if (response.data.products){
                        // No same ean products found.
                        if (!response.data.products.length) {
                            return;
                        }
                        let tplProduct;
                        let msg = "";
                        let zunkaCodes = [];
                        for (let resProduct of response.data.products) {
                            // console.log(`_id: ${resProduct._id}, storeProductId: ${resProduct.storeProductId}`);
                            if (!zunkaCodes.includes(resProduct.storeProductId)
                                && this.product._id != resProduct._id 
                                && this.product.storeProductId != resProduct.storeProductId) 
                            {
                                // console.log(`pushed ->_id: ${resProduct._id}, storeProductId: ${resProduct.storeProductId}`);
                                zunkaCodes.push(resProduct.storeProductId);
                                msg += `\n    ${resProduct._id}`;
                            }
                        }
                        // Same ean product found was it self.
                        if (!zunkaCodes.length) {
                            return;
                        }
                        // Usally products with same EAN must have the same storeProductId.
                        if (zunkaCodes.length > 1) {
                            window.alert(`Os seguintes produtos com o mesmo EAN mas com código Zunka diferentes foram encontrados:${msg}`);
                            return;
                        }
                        // Confirm load data from other product.
                        // console.log(`ean products: ${JSON.stringify(response.data.products, null, 4)}`);
                        if(window.confirm(`Produto com EAN ${val} já existe.\nDeseja carregar informações do produto existente?`)) {
                            tplProduct = response.data.products[0];
                            axios.post(`/admin/product-copy-images/`, { srcId: tplProduct._id, dstId: this.product._id }, {
                                headers: {
                                    "Accept": "application/json", 
                                    'csrf-token' : csrfToken,
                                }
                            })
                            .then((response)=>{
                                // console.log(`this.product._id: ${this.product._id}`);
                                // Error.
                                if (response.data.error) {
                                    prompt(`Ocorreu um erro ao tentar carregar as informações do produto ${val}`);
                                    this.product.storeProductId = "";
                                    console.error(response.data.error);
                                } else {
                                    // this.product.dealerName = "Dell";
                                    // this.product.dealerProductWarrantyDays = tplProduct.dealerProductWarrantyDays;
                                    this.enableWatchStoreProductId = false;
                                    this.product.storeProductId = tplProduct.storeProductId;
                                    let v = this;
                                    setTimeout(function(){ v.enableWatchStoreProductId = true; },100);
                                    this.product.storeProductTitle = tplProduct.storeProductTitle;
                                    this.product.storeProductInfoMD = tplProduct.storeProductInfoMD;
                                    this.product.storeProductDetail = tplProduct.storeProductDetail;
                                    this.product.storeProductDescription = tplProduct.storeProductDescription;
                                    this.product.storeProductTechnicalInformation = tplProduct.storeProductTechnicalInformation;
                                    this.product.storeProductAdditionalInformation = tplProduct.storeProductAdditionalInformation;
                                    this.product.storeProductMaker = tplProduct.storeProductMaker;
                                    this.product.storeProductCategory = tplProduct.storeProductCategory;
                                    this.product.storeProductLength = tplProduct.storeProductLength;
                                    this.product.storeProductHeight = tplProduct.storeProductHeight;
                                    this.product.storeProductWidth = tplProduct.storeProductWidth;
                                    this.product.storeProductWeight = tplProduct.storeProductWeight;
                                    this.product.storeProductMarkup = tplProduct.storeProductMarkup;
                                    this.product.storeProductWarrantyDays = tplProduct.storeProductWarrantyDays;
                                    this.product.storeProductWarrantyDetail = tplProduct.storeProductWarrantyDetail;
                                    this.product.warrantyMarkdownName = tplProduct.warrantyMarkdownName;
                                    // Deprecatade - begin.
                                    this.product.includeWarrantyText = tplProduct.includeWarrantyText;
                                    // Deprecatade - end.
                                    this.product.images = tplProduct.images;
                                    this.product.includeOutletText = tplProduct.includeOutletText;
                                    this.product.displayPriority = tplProduct.displayPriority;
                                    this.product.marketZoom = tplProduct.marketZoom;
                                }
                            }) 
                            .catch((err)=>{
                                console.log(err.stack);
                            });
                        }
                    }
                })
                .catch((err)=>{
                    console.error(err);
                    alert(`Não foi possível verificar código ean ${val}`);
                    this.product.ean = "";
                });        
            }
        }
    }, 
    computed: {
        // Only external products can be active or unactive, internal products use only the flag commercialize.
        // So internal products always active.
        // isProductActive() {
            // if (this.product.dealerName.toLowerCase() == "aldo" || this.product.dealerName.toLowerCase() == "allnations") {
                // return this.product.dealerProductActive;
            // }
            // return true;
        // },
    },
    methods: {
        // Calculate final price with discount.
        calcFinalPrice(){
            // Get values from input.
            product.storeProductMarkup = this.toNumberFormatString(this.storeProductMarkupeBr);
            product.storeProductDiscountValue = this.toNumberFormatString(this.storeProductDiscountValue);
            product.dealerProductPrice = this.toNumberFormatString(this.dealerProductPrice);
            // Price with markup.
            let priceWithMarkup = product.dealerProductPrice * (product.storeProductMarkup / 100 + 1)
            // Use discount.
            if(product.storeProductDiscountEnable){
                // Use percentage.
                if(product.storeProductDiscountType === '%'){
                    product.storeProductPrice = (priceWithMarkup * (1 - (product.storeProductDiscountValue / 100))).toFixed(2);
                    this.storeProductPriceBr = this.toBRCurrencyString(product.storeProductPrice);
                }
                // Use monetary value.
                else {
                    product.storeProductPrice = (priceWithMarkup - product.storeProductDiscountValue).toFixed(2);
                    this.storeProductPriceBr = this.toBRCurrencyString(product.storeProductPrice);
                }
            }
            // No discount.
            else {
                product.storeProductPrice = priceWithMarkup.toFixed(2);
                this.storeProductPriceBr = this.toBRCurrencyString(product.storeProductPrice);
            }
        },
        // Calculate markup from price final.
        calcMarkup(){
            // Get values from input.
            product.storeProductPrice = this.toNumberFormatString(this.storeProductPriceBr);
            // Diasable discount.
            product.storeProductDiscountEnable = false;
            // console.log(`calcMarkup: ${product.storeProductPrice} - ${typeof product.storeProductPrice}`);
            //  Markup.
            product.storeProductMarkup = (((product.storeProductPrice / product.dealerProductPrice) - 1) * 100).toFixed(2);
            this.storeProductMarkupeBr = this.toBRCurrencyString(product.storeProductMarkup);
        },
        // Save product.
        saveProduct(link){
            // console.log(`link-a: ${link}`);
            // console.debug(product.storeProductCategory);
            axios({
                method: 'post',
                url: window.location.pathname,
                headers:{'csrf-token' : csrfToken},
                data: { product: product }
            })
            .then(response => {
                // Validation error.
                // console.log(JSON.stringify(response.data, null, 2));
                if (response.data.validation) {
                    for (let key in this.validation){
                        this.validation[key] = response.data.validation[key];
                    }
                    alert('Não foi possível salvar.\nConfira as mensagens de erro nos campos.');
                    return;
                    // No error validation.
                } else {
                    // Clean error validation.
                    for (let key in this.validation){
                        this.validation[key] = '';
                    }
                }
                // Server side error.
                if (response.data.err) {
                    alert('Não foi possível salvar.');
                // Saved.
                } 
                else {
                    // console.log(`link: ${link}`);
                    if (!link) {
                        window.location.href = '/admin/';
                    } else if (link != 'stay') {
                        window.location.href = link;
                    } else {
                        this.buttonSaveValue = 'Ok';
                        setTimeout(()=>{
                            this.buttonSaveValue = 'Salvar';
                        }, 300);
                    }
                }
            })
            .catch(err => {
                alert('Não foi possível salvar.');
                console.error(err);
            })
        },
        // Delete product.
        deleteProduct(){
            if(confirm('Confirma a remoção do produto?')){
                axios({
                    method: 'delete',
                    url: window.location.pathname,
                    headers:{'csrf-token' : csrfToken},
                    data: { product_id: product._id }
                })
                    .then(response => {
                        // Server side error.
                        if (response.data.err) {
                            alert('Não foi possível apagar o produto.');
                        }
                        else {
                            window.location.href = '/admin/';
                        }
                    })
                    .catch(e => {
                        alert('Não foi possível apagar o produto.');
                        console.error(e);
                    })
            }
        },
        moveImage(index, direction){
            // Position to move.
            let toIndex;
            // To right.
            if (direction === 'r') {
                // Last element.
                if ((index + 1) === this.product.images.length) {
                    toIndex = 0;
                    // Not the last element.
                } else  {
                    toIndex = index + 1;
                }
                // To left.
            } else {
                // First element.
                if (index === 0) {
                    toIndex = this.product.images.length - 1;
                    // Not the last element.
                } else  {
                    toIndex = index - 1;
                }
            }
            // Change elements.
            let toIndexElement = this.product.images[toIndex];
            this.$set(this.product.images, toIndex, this.product.images[index]);
            this.$set(this.product.images, index, toIndexElement);
        },
        // Delete image.
        deleteImage(index){
            this.$delete(this.product.images, index);
        },
        // Upload image to server.
        uploadImage(){
            let self = this;
            let files = document.getElementById('uploadImage').files;
            // no files
            if (files.length === 0) {
                alert('Nenhuma imagem para upload foi selecionada.');
                // too many files
            } else if (files.length > 8) {
                alert('Selecione no máximo 8 imagens por vez.')
            }
            // it's ok
            else {
                let formData = new FormData();
                for (var i = 0; i < files.length; i++) {
                    formData.append('pictures[]', files[i]);
                }
                // Send images.
                axios({
                    method: 'put',
                    url: `/admin/upload-product-images/${this.product._id}`,
                    headers:{'csrf-token' : csrfToken},
                    data: formData
                })
                    .then(response => {
                        // Include images on client.
                        response.data.images.forEach(function(image){
                            self.product.images.push(image);
                        });
                    })
                    .catch(e => {
                        alert('Não foi possível salvar.');
                        console.error(e);
                    })
            }
        },
        toNumberFormatString(val) {
            // To 1000.99 format.
            return val.replace(/\./g, '').replace(',', '.');
        },
        toBRCurrencyString(val) {
            // return this.product.storeProductPrice.toFixed(2).replace('.', ',').replace(/\B(?=(\d{3})+(?!\d))/g, ".");
            // console.log(`toBRCurrencyString - ${val} - ${typeof val}`);
            return val.replace('.', ',').replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        },
        async createMeliProduct(){
            try {
                for (let attribute of this.meliCategoryAttributes) {
                    if (!attribute.text)
                        return alert(`Campo ${attribute.name} não preenchido`);

                    // // Convert to number if field is number_unit.
                    // if (attribute.value_type.startsWith('number_unit')) {
                        // let parsedValue = parseInt(attribute.text, 10);
                        // if (isNaN(parsedValue)) {
                            // return alert(`Campo ${attribute.name} com valor inválido, valor deve ser numérico`);
                        // } else {
                            // attribute.text = parsedValue;
                        // }
                    // }

                    // console.log(attribute.text);
                }
                // console.log(this.meliCategoryAttributes);
                // return;
                // console.log('createProductIntoMercadoLivre');
                let response = await axios.post(
                    '/meli/products', 
                    { 
                        productId: this.product._id, 
                        categoryId: this.meliCategoryId, 
                        attributes: this.meliCategoryAttributes, 
                        meliListingType: this.meliListingType
                    }, 
                    { headers:{'csrf-token' : csrfToken} }
                );

                // console.log(JSON.stringify(response.data, null, 2));
                // Server side error.
                if (response.data.err || !response.data.mercadoLivreId) {
                    return alert('Não foi possível criar o produto no Mercado Livre.');
                } 
                this.product.mercadoLivreId = response.data.mercadoLivreId;
                this.loadMeliProduct();
            } 
            catch(err) {
                if (err.response && err.response.data) {
                    console.error(err.response.data);
                } else if (err.response) {
                    console.error(err.response);
                } else {
                    console.error(err);
                }
                alert('Não foi possível salvar.');
            }
        },
        async updateMeliProduct(status){
            try {
                // console.log('createProductIntoMercadoLivre');
                let response = await axios.put(`/meli/products/${this.product._id}`, { status: status }, { headers:{'csrf-token' : csrfToken} })
                // console.log(JSON.stringify(response.data, null, 2));
                // Server side error.
                if (response.data.err) {
                    return alert('Não foi possível atualizar o produto no Mercado Livre.');
                } 
                this.loadMeliProduct()

                // if (status == 'deleted') {
                    // this.product.mercadoLivreId = '';
                    // this.meliProduct = {};
                // } else {
                    // this.loadMeliProduct()
                // }
            } 
            catch(err) {
                if (err.response && err.response.data) {
                    console.error(err.response.data);
                } else if (err.response) {
                    console.error(err.response);
                } else {
                    console.error(err);
                }
                alert('Não foi possível salvar.');
            }
        },
        async loadMeliProduct(){
            try {
                console.log('Loading meli product');
                if (!this.product.mercadoLivreId) {
                    this.loadMeliProductCategoryAttriubtes();
                    return;
                }
                // console.log('createProductIntoMercadoLivre');
                let response = await axios.get(`/meli/products/${this.product.mercadoLivreId}`, { headers:{'csrf-token' : csrfToken} })
                // console.log(JSON.stringify(response.data, null, 2));
                // Server side error.
                if (response.data.err || !response.data) {
                    return alert('Não foi possível obter o produto do Mercado Livre.');
                } 
                console.log(response.data);
                console.log('End loading meli product');
                this.meliProduct = response.data;
            } 
            catch(err) {
                if (err.response && err.response.data) {
                    console.error(err.response.data);
                } else if (err.response) {
                    console.error(err.response);
                } else {
                    console.error(err);
                }
                alert('Não foi possível obter o produto no Mercado Livre.');
            }
        },
        async loadMeliProductCategoryAttriubtes(){
            try {
                if (this.product.storeProductCategory) {
                    let response = await axios.get(`/meli/category/attributes-by-zunka-product-category/${this.product.storeProductCategory}`, { headers:{'csrf-token' : csrfToken} })
                    // console.log(JSON.stringify(response.data, null, 2));
                    // Server side error.
                    if (response.data.err) {
                        return alert('Não foi possível obter atributos da categoria do Mercado Livre');
                    } 
                    try {
                        this.meliCategoryId = response.data.meliCategoryId;
                        for (const [i, el] of response.data.meliCategories.entries()) {
                            // Fill attribure gtin with product ean.
                            if ((response.data.meliCategories[i].id.trim().toLowerCase() == 'gtin') && product.ean.trim()) {
                                response.data.meliCategories[i].text = product.ean.trim();
                            } 
                            // Should be empty.
                            else {
                                response.data.meliCategories[i].text = '';
                            }
                        }
                        this.meliCategoryAttributes = response.data.meliCategories;
                    } catch(err) {}
                    // console.log(`attributes: ${JSON.stringify(response.data, null, 4)}`);
                }
            } 
            catch(err) {
                if (err.response && err.response.data) {
                    console.error(err.response.data);
                } else if (err.response) {
                    console.error(err.response);
                } else {
                    console.error(err);
                }
                alert('Não foi possível obter atributos da categoria do Mercado Livre');
            }
        },
        // Update editedAt to now.
        async updateEditedAt(){
            try {
                let response = await axios.put(`/admin/product/${this.product._id}/edited-at`, {}, { headers:{'csrf-token' : csrfToken} })
                // console.log(JSON.stringify(response.data, null, 2));
                // Server side error.
                if (response.data.err) {
                    return alert('Não foi possível obter atualizar a data da edição');
                } 
                // console.log(response.data);
                this.product.updatedAt = response.data.product.updatedAt;
                this.product.editedAt = response.data.product.editedAt;
                // console.log(`attributes: ${JSON.stringify(response.data, null, 4)}`);
            } 
            catch(err) {
                if (err.response && err.response.data) {
                    console.error(err.response.data);
                } else if (err.response) {
                    console.error(err.response);
                } else {
                    console.error(err);
                }
                return alert('Não foi possível obter atualizar a data da edição');
            }
        },
        setMeliCommissionClassic(){
            // Get values from input.
            product.meliCommission = 12;
        },
        setMeliCommissionPremium(){
            // Get values from input.
            product.meliCommission = 17;
        },
    },
});
